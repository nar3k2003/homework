const holydays = [
    '1.11'
],
    hotdays = [
    ],
    year = new Date().getFullYear();

let holydaysFull = holydays.map(item => item + '.' + year);
let hotdaysFull = hotdays.map(item => item + '.' + year);

function exceptionDate(date, dateFormat, reminder = false) {
    var month = date.getMonth() + 1;
    var day = date.getDate();
    var year = date.getFullYear();
    var celebrationDate = day + '.' + month + '.' + year;

    var formattedDate = moment(date).format('YYYY-MM-DD');

    if (dateFormat > formattedDate) {
        return true;
    }

    if (reminder === true) {
        if (date.getDay() === 6 || date.getDay() === 0 || holydaysFull.includes(celebrationDate)) {
            return true;
        }
    }
    else {
        if (date.getDay() === 0 || holydaysFull.includes(celebrationDate)) {
            return true;
        }
    }
}

function exceptionDate2(date, dateFormat, data, reminder = false) {
    var month = date.getMonth() + 1;
    var day = date.getDate();
    var year = date.getFullYear();
    var celebrationDate = day + '.' + month + '.' + year;

    var formattedDate = moment(date).format('YYYY-MM-DD');

    if (dateFormat > formattedDate) {
        return true;
    }
    
    if (reminder === true) {
        if (date.getDay() === 6 || date.getDay() === 0 || holydaysFull.includes(celebrationDate)) {
            if (!hotdaysFull.includes(celebrationDate)) return true;
        }
        else {
            let exc = data.exception,
                response = false;

            exc.forEach(elem => {
                elemDate = new Date(elem);
                if (moment(elemDate).format("YYYY-MMM-DD") == moment(date).format("YYYY-MMM-DD")) {
                    response = true;
                }
            });

            return response;
        }
    }
    else {
        if (date.getDay() === 0 || holydaysFull.includes(celebrationDate)) {
            return true;
        }
        else {
            let exc = data.exception,
                response = false;

            exc.forEach(elem => {
                elemDate = new Date(elem);
                if (moment(elemDate).format("YYYY-MMM-DD") == moment(date).format("YYYY-MMM-DD")) {
                    response = true;
                }
            });

            return response;
        }
    }
}